<?php

/**
 * @file
 * Creates a versioned list of node aliases
 */


/**
 * Implements hook_help().
 */
function version_redirect_help($path) {
  $output = '';
  switch ($path) {
    case 'admin/help#version_redirect':
      $output = t('Keeps track of URL aliases so that if someone navigates to a change alias, Drupal redirects to a new one. ');
      $output .= t('This is called on all Save events that show a difference in URL alias.');
      $output .= t('If a node takes another node\'s alias, the existing node, rather than the versioned alias will take precedence.');
      $output .= t('The versioning redirect will only occur if a 404 happens. When the redirect occurs, this will be registered as a 301.');
      $output .= t('For duplicate aliases between nodes in the versioning table, a page will respond with a page that displays a list of the links.');
      break;
  }
  return $output;
}


/**
 * Implements hook_init()
 */
function version_redirect_init() {
  if(!menu_get_item($_GET['q'])) {

   $entries = db_select('version_redirect')
    ->fields('version_redirect')
    ->condition('alias', $_GET['q'])
    ->execute()->fetchAll(PDO::FETCH_ASSOC);

    if (!empty($entries)) {
      if (sizeof($entries) > 1) {
        _version_redirect_show_selection_page($entries[0]['alias']);
      } else {
        drupal_goto('node/' . $entries[0]['nid'], array(), 302);
      }
    }
  }
}


/**
 *  Implements hook_node_presave()
 *
 *  This only hooks for when the alias is being adjusted manually. 
 */
function version_redirect_node_presave($node) {

  // Make sure we're dealing with an existing node
  if (isset($node->nid)) {

    // Look  up the current alias
    $entries = db_select('url_alias')
      ->fields('url_alias')
      ->condition('source', 'node/' . $node->nid)
      ->execute()->fetchAll(PDO::FETCH_ASSOC);

    // Set to convenient variable
    $current_alias = $entries[0]['alias'];

    if (isset($node->path['alias'])) {
      $new_alias = $node->path['alias'];
      if (strcmp($current_alias, $new_alias) != 0) {
        _version_redirect_create_new_alias($node->nid, $current_alias, $new_alias);
      }        
    }  
  }
}


/**
 * Main function to create our versioned alias
 * @param  $nid           
 *   Node id
 * @param  $current_alias 
 *   The current url alias of the node
 * @param  $new_alias     
 *   The generated url alias of the node
 */
function  _version_redirect_create_new_alias($nid, $current_alias, $new_alias) {
  _version_redirect_add_version($nid, $current_alias);
  _version_redirect_check_if_new_version_is_in_table($nid, $new_alias);
}


/**
 * Add the old url alias to the versioning table
 * @param  $nid           
 *   Node id
 * @param  $version_alias
 *   The old versioned alias that the module saves
 */
function _version_redirect_add_version($nid, $version_alias) {

  if (!_version_redirect_check_if_version_alias_already_exists($nid, $version_alias)) {
    db_insert('version_redirect')
      ->fields(array('nid' => $nid, 'alias' => $version_alias))
      ->execute();   
    }
}


/**
 * Check if we already have the alias present in the table for this node.
 * 
 * @param  $nid             
 *   Node id
 * @param  $versioned_alias
 *   The old alias that the module will save in the db
 * @return bool             
 */
function _version_redirect_check_if_version_alias_already_exists($nid, $versioned_alias) {
    $entries = db_select('version_redirect')
      ->fields('version_redirect')
      ->condition('nid', $nid)
      ->condition('alias', $versioned_alias)
      ->execute()->fetchAll(PDO::FETCH_ASSOC);

    if (empty($entries)) {
      return false;
    } else {
      return true;
    }
}


/**
 * Tests if the new version of an alias is in the db. Won't need to redirect if 
 * the existing alias routes correctly. Essentially this is Db clean up. 
 * @param  $nid  
 *   Node id
 * @param  $new_alias
 *   The just created alias
 */
function _version_redirect_check_if_new_version_is_in_table($nid, $new_alias) {
   $entries = db_select('version_redirect')
    ->fields('version_redirect')
    ->condition('nid', $nid)
    ->execute()->fetchAll(PDO::FETCH_ASSOC);

    if (!empty($entries)) {
      $len = sizeof($entries);
      for($i = 0; $i < $len; $i++) {
        $current = $entries[$i];
        if (strcmp($current['alias'], $new_alias) == 0) {
          db_delete('version_redirect')
            ->condition('nid', $nid)
            ->condition('alias', $new_alias)
            ->execute();
        }
      }
    }
}


/**
 * Implements hook_node_delete()
 */
function version_redirect_node_delete($node) {
  db_delete('version_redirect')
    ->condition('nid', $node->nid)
    ->execute();
}


/**
 * Implements hook_menu()
 */
function version_redirect_menu() {
  $items = array();

  $items['alias-version/%'] = array(
    'title' => 'Choose Correct Page',
    'page callback' => '_version_redirect_display_list_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'page arguments' => array(1),
  );

  return $items;
}


/**
 * Redirects the user to our settle resolution page with the appropriate alias.
 * 
 * This feature is intended to resolve the conflict where at least two versioned 
 * aliases are the same. Therefore, the module presents a page with a list of 
 * aliased links for the user to select. 
 * 
 * @param  $entry
 *   The url alias being looked up.
 */
function _version_redirect_show_selection_page($entry) {
  drupal_goto('alias-version/' . urlencode($entry), array(), 302);
}


/**
 * Displays a page with a list of links that all contain the same alias
 * in the versioning table. 
 *
 * This feature is intended to resolve the conflict where at least two versioned 
 * aliases are the same. Therefore, the module presents a page with a list of 
 * aliased links for the user to select. 
 * 
 * @param $alias 
 *   The url alias that is in conflict
 * @return 
 *   HTML
 */
function _version_redirect_display_list_page($alias) {

  $real_alias = urldecode($alias);

   $entries = db_select('version_redirect')
    ->fields('version_redirect')
    ->condition('alias', $real_alias)
    ->execute()->fetchAll(PDO::FETCH_ASSOC);

  $list = '';
  for ($i=0; $i < sizeof($entries); $i++) {
    $node = node_load($entries[$i]['nid']);
    $list .= '<div>'. l($node->title, 'node/' . $node->nid) .'</div>';
  }

  return $list;
}


/**
 * Implements hook_pathauto_alias_alter()
 *
 * Remember, this is only for automated aliases. 
 */
function version_redirect_pathauto_alias_alter($alias, $context) {

  // In bulk updates on the url aliases menu, user/ paths will attempted to be inserted
  // This module currently only covers nodes
  if (!strpos($context['source'], 'user/')) {
    if ($context['op'] == 'bulkupdate' || $context['op'] == 'update') {
      $entries = db_select('url_alias')
        ->fields('url_alias')
        ->condition('source', $context['source'])
        ->execute()->fetchAll(PDO::FETCH_ASSOC);

      if (strcmp($entries[0]['alias'], $alias) != 0) {
        $nid = str_replace('node/', '', $context['source']);
        _version_redirect_create_new_alias($nid, $entries[0]['alias'], $alias);
      }
    }    
  }

}

