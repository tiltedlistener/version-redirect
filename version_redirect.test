<?php
/**
 * @file
 * SimpleTests for version_redirect module.
 */

/**
 * Default test case for the version_redirect module.
 *
 * @ingroup version_redirect
 */
class VersionRedirectWebTestCase extends DrupalWebTestCase {

  protected $privilegedUser;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => "Version Redirect Tests",
      'description' => 'Various web tests on the version_redirect module.' ,
      'group' => 'Version Redirect',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp('pathauto', 'globalredirect', 'version_redirect');   

    // Add dummy nodes
    $settings = array(
      'type' => 'article',
      'title' => "Sample Page",
      'body' => array(LANGUAGE_NONE => array(array($this->randomName(64)))),
    );
    $this->drupalCreateNode($settings);  

    $settingsTwo = array(
      'type' => 'article',
      'title' => "Other Sample Page",
      'body' => array(LANGUAGE_NONE => array(array($this->randomName(64)))),
    );
    $this->drupalCreateNode($settingsTwo);       

    $this->privilegedUser = $this->drupalCreateUser(array(
      'administer content types',
      'create article content',
      'edit any article content',
      'delete any article content',
      'access content',
    ));
    $this->drupalLogin($this->privilegedUser);
  }

  /**
   * Test we can look up a versioned alias after its url changed.
   */
  public function testNameChangeForAutomatedAndDatabaseLookup() {

    // Get all the nodes
    $nodes = db_query('SELECT * FROM {node}')->fetchAll(PDO::FETCH_ASSOC);

    // Update the URL
    $this->assertTrue(drupal_get_path_alias('node/' . $nodes[0]['nid']) == 'content/sample-page');

    // Update Title (and therefore URL with pathauto)
    $edit = array("title" => "New Sample Page");
    $this->drupalPost('node/' . $nodes[0]['nid'] . '/edit', $edit, t('Save'));
    $this->assertResponse(200);    
    $this->assertText("Article ". $edit['title'] ." has been updated.");

    // Reload
    $updated_nodes = db_query('SELECT * FROM {node}')->fetchAll(PDO::FETCH_ASSOC);
    $this->assertTrue($updated_nodes[0]['title'] == 'New Sample Page');
    $this->assertTrue(db_query('SELECT * FROM {url_alias} WHERE source=:source', array(':source' => 'node/' . $updated_nodes[0]['nid']))->fetchAll(PDO::FETCH_ASSOC)[0]['alias'] == 'content/new-sample-page');

    // Check that the versioned alias is present
    $versioned_aliases = db_query('SELECT * FROM {version_redirect} WHERE nid=:nid', array(':nid' => $updated_nodes[0]['nid']))->fetchAll(PDO::FETCH_ASSOC);
    $this->assertTrue('content/sample-page' == $versioned_aliases[0]['alias']);
  }

  /**
   * Test that a versioned alias redirects
   */
  /**
  public function testRedirect() {

  }

  /**
   * Test after we change a url that it redirects
   */
  /**
  public function testChangeUrlRedirect() {

  }

   /**
   * Test after we change a url that it redirects
   */
  /**
  public function testOverlapTakesPrecedence() {

  }

   /**
   * Test after we change a url that it redirects
   */
  /**
  public function testThatARedirectIsA301() {

  }

   /**
   * Test after we change a url that it redirects
   */
  /**
  public function testProper404DoesntLoop() {

  }
  **/


}
