<?php
/**
 * @file
 * SimpleTests for version_redirect module.
 */

/**
 * Default test case for the version_redirect module.
 *
 * @ingroup version_redirect
 */
class VersionRedirectWebTestCase extends DrupalWebTestCase {

  protected $privilegedUser;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => "Version Redirect Tests",
      'description' => 'Various web tests on the version_redirect module.' ,
      'group' => 'Version Redirect',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp('pathauto', 'globalredirect', 'version_redirect', 'path', 'token', 'taxonomy');   

    // Add dummy nodes
    $settings = array(
      'type' => 'article',
      'title' => "Sample Page",
      'body' => array(LANGUAGE_NONE => array(array($this->randomName(64)))),
    );
    $this->drupalCreateNode($settings);  

    $settingsTwo = array(
      'type' => 'article',
      'title' => "Other Sample Page",
      'body' => array(LANGUAGE_NONE => array(array($this->randomName(64)))),
    );
    $this->drupalCreateNode($settingsTwo);       

    $this->privilegedUser = $this->drupalCreateUser(array(
      'administer pathauto',
      'administer url aliases',
      'create url aliases',
      'administer nodes',
      'bypass node access',
      'access content overview',
      'administer taxonomy',
      'administer users',      
      'administer content types',
      'create article content',
      'edit any article content',
      'delete any article content',
      'access content',
    ));
    $this->drupalLogin($this->privilegedUser);
  }

  /**
   * Test we can look up a versioned alias after its url changed.
   */
  public function testNameChangeForAutomatedAndDatabaseLookup() {

    // Get all the nodes
    $nodes = db_query('SELECT * FROM {node}')->fetchAll(PDO::FETCH_ASSOC);

    // Update the URL
    $this->assertTrue(drupal_get_path_alias('node/' . $nodes[0]['nid']) == 'content/sample-page');

    // Update Title (and therefore URL with pathauto)
    $edit = array("title" => "New Sample Page");
    $this->drupalPost('node/' . $nodes[0]['nid'] . '/edit', $edit, t('Save'));
    $this->assertResponse(200);    
    $this->assertText("Article ". $edit['title'] ." has been updated.");

    // Reload
    $updated_nodes = db_query('SELECT * FROM {node}')->fetchAll(PDO::FETCH_ASSOC);
    $this->assertTrue($updated_nodes[0]['title'] == 'New Sample Page');
    $this->assertTrue(db_query('SELECT * FROM {url_alias} WHERE source=:source', array(':source' => 'node/' . $updated_nodes[0]['nid']))->fetchAll(PDO::FETCH_ASSOC)[0]['alias'] == 'content/new-sample-page');

    // Check that the versioned alias is present
    $versioned_aliases = db_query('SELECT * FROM {version_redirect} WHERE nid=:nid', array(':nid' => $updated_nodes[0]['nid']))->fetchAll(PDO::FETCH_ASSOC);
    $this->assertTrue('content/sample-page' == $versioned_aliases[0]['alias']);
  }

  /**
   * Test that a versioned alias redirects
   */
  public function testRedirectOccursAfterAutomatedAliasChange() {
    $node = node_load(1);
    $this->assertTrue(drupal_get_path_alias('node/' . $node->nid) == 'content/sample-page');

    // Update Title (and therefore URL with pathauto)
    $edit = array("title" => "New Sample Page");
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
    $this->assertResponse(200);    
    $this->assertText("Article ". $edit['title'] ." has been updated.");

    // Clear caches
    drupal_lookup_path('wipe');
    drupal_flush_all_caches();

    // Check that we've got a change
    $update_node = node_load(1);
    $this->assertTrue(drupal_get_path_alias('node/' . $update_node->nid) == 'content/new-sample-page');

    // Get the old path
    $this->drupalGet('content/sample-page');   
    $this->assertUrl('content/new-sample-page');
  }

  /**
   * Test after we change a url that it redirects for both changes
   */
  public function testChangedAutomatedAliasRedirectsForTwiceChangedUrl() {
    $node = node_load(1);
    $this->assertTrue(drupal_get_path_alias('node/' . $node->nid) == 'content/sample-page');

    // Update Title (and therefore URL with pathauto)
    $edit = array("title" => "New Sample Page");
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
    $this->assertResponse(200);    
    $this->assertText("Article ". $edit['title'] ." has been updated.");

    // Clear caches
    drupal_lookup_path('wipe');
    drupal_flush_all_caches();

    // Check that we've got a change
    $update_node = node_load(1);
    $this->assertTrue(drupal_get_path_alias('node/' . $update_node->nid) == 'content/new-sample-page');

    // Change Again
    // Clear caches
    drupal_lookup_path('wipe');
    drupal_flush_all_caches();

    // Get the node and confirm the alias is updated
    $update_again_new = node_load(1);
    $edit = array("title" => "New Sample Page Other");
    $this->drupalPost('node/' . $update_again_new->nid . '/edit', $edit, t('Save'));
    $this->assertResponse(200);    
    $this->assertText("Article ". $edit['title'] ." has been updated.");    

    // Clear caches
    drupal_lookup_path('wipe');
    drupal_flush_all_caches();

    // Get the old path
    $this->drupalGet('content/sample-page');
    $this->assertUrl('content/new-sample-page-other');    

    $this->drupalGet('content/new-sample-page');  
    $this->assertUrl('content/new-sample-page-other');     
  }

   /**
   * Test after we change a url that it redirects
   *
   * This is to ensure that url_aliases take priority if a node happens to take on a versioned alias
   */
  public function testOverlappedAliasTakesPrecedence() {
    $node = node_load(1);
    $this->assertTrue(drupal_get_path_alias('node/' . $node->nid) == 'content/sample-page');

    // Update Title (and therefore URL with pathauto)
    $edit = array("title" => "New Sample Page");
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
    $this->assertResponse(200);    
    $this->assertText("Article ". $edit['title'] ." has been updated.");

    // Clear caches
    drupal_lookup_path('wipe');
    drupal_flush_all_caches();

    // Check that we've got a change
    $update_node = node_load(1);
    $this->assertTrue(drupal_get_path_alias('node/' . $update_node->nid) == 'content/new-sample-page');

    // Get the old path
    $this->drupalGet('content/sample-page');   
    $this->assertUrl('content/new-sample-page');
    $this->assertUrl('node/1');

    // Add a new node and give it the other node's url
    $settings = array(
      'type' => 'article',
      'title' => "Sample Page",
      'body' => array(LANGUAGE_NONE => array(array($this->randomName(64)))),
    );
    $this->drupalCreateNode($settings);   

    // Clear caches
    drupal_lookup_path('wipe');
    drupal_flush_all_caches();

    // Now check that alias works
    $this->drupalGet('content/sample-page');    
    $this->assertUrl('content/sample-page');
    $this->assertUrl('node/3');    
  }

   /**
   * Test that 404s still occur when looking for pages not in the node table
   */
  public function testProper404DoesntLoop() {
    // Fetch a bad url
    $this->drupalGet('content/sample-page-test');  
    $this->assertResponse(404);    
  }

   /**
   * Test that 404s occur when a node is deleted along with its versioned aliases
   */
  public function testProper404OccursOnDelete() {
    $node = node_load(1);
    $this->assertTrue(drupal_get_path_alias('node/' . $node->nid) == 'content/sample-page');

    // Update Title (and therefore URL with pathauto)
    $edit = array("title" => "New Sample Page");
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
    $this->assertResponse(200);    
    $this->assertText("Article ". $edit['title'] ." has been updated.");

    // Clear caches
    drupal_lookup_path('wipe');
    drupal_flush_all_caches();

    // Test Change occured 
    $this->drupalGet('content/sample-page');   
    $this->assertUrl('content/new-sample-page');    

    // Delete Node
    $this->drupalPost('node/' . $node->nid . '/edit', array(), t('Delete'));   
    $this->drupalPost(NULL, array(), t('Delete'));
    $this->assertText(t('has been deleted'));     

    // Clear caches
    drupal_lookup_path('wipe');
    drupal_flush_all_caches();

    // Test that both pages aren't found
    $this->drupalGet('content/sample-page');  
    $this->assertResponse(404);    

    $this->drupalGet('content/new-sample-page');  
    $this->assertResponse(404);    
  }

  /**
   * If we create a manual alias, this will track the old automated one. 
   */
  public function testManuallyUpdateUrlCreatesVersionedAlias() {
    $node = node_load(1);
    $manual_alias = 'content-stuff/' . $node->nid;
    $edit = array(
      'path[pathauto]' => FALSE,
      'path[alias]' => $manual_alias,
    );
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
    $this->assertResponse(200);   

    $this->drupalGet('content/sample-page');  
    $this->assertUrl('content-stuff/' . $node->nid);  
  }


  /**
   * If we create a manual alias, this will track the old automated one, and if we create a further manual one,
   * the old customize one will be saved as well. 
   */
  public function testMoreThanOneManuallyUpdateUrlCreatesVersionedAlias() {
    $node = node_load(1);
    $manual_alias = 'content-stuff/' . $node->nid;
    $edit = array(
      'path[pathauto]' => FALSE,
      'path[alias]' => $manual_alias,
    );
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
    $this->assertResponse(200);   

    $this->drupalGet('content/sample-page');  
    $this->assertUrl('content-stuff/' . $node->nid);  

    $manual_alias = 'content-stuff-other/' . $node->nid;
    $edit = array(
      'path[pathauto]' => FALSE,
      'path[alias]' => $manual_alias,
    );
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
    $this->assertResponse(200); 

    $this->drupalGet('content/sample-page');  
    $this->assertUrl('content-stuff-other/' . $node->nid);  

    $this->drupalGet('content-stuff/' . $node->nid);  
    $this->assertUrl('content-stuff-other/' . $node->nid);      
  }  

  /**
   *  In case a user creates their own alias, goes to customized, then turns automated back on. 
   */
  public function testManuallySetUrlSwitchedBackToAutomatedAliasCreatesVersionedAlias() {
    $node = node_load(1);
    $manual_alias = 'content-stuff/' . $node->nid;
    $edit = array(
      'path[pathauto]' => FALSE,
      'path[alias]' => $manual_alias,
    );
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));

    // From the previous test we know this will set the alias correctly
    
    // Now we reset the alias back using the automated one
    $edit = array(
      'path[pathauto]' => TRUE,
    );
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));

    $this->drupalGet('content-stuff/' . $node->nid);
    $this->assertUrl('content/sample-page');
  }

  /**
   * BULK UPDATES
   *
   * Bulk updates are handled node by node in the hook_pathauto_alias_alter
   * These operate just like a standard individual update.
   * 
   */

}
